<%   

    if(typeof _language !== 'undefined'){
        _language = Object.keys(_language).map(key=>{
            let d = {};
            d[key] = _language[key]
        
            return JSON.stringify(d).split('\'').join("\\'");
        
        });
    }else{
        let _language = '';

        console.log();
    }
%>
    <script>
        let path = "<%= path %>",
            language = "<%= language %>",
            s_language = '<%- typeof _language !=="undefined"?_language:""  %>',
            _language = {};
        if (s_language.length > 1) {
            s_language.split('},').map(keyV => {
                let vaLK = keyV.replace('}', '').split(':')[1].slice(1, keyV.replace('}', '').split(':')[1].length).slice(0, keyV.replace('}', '').split(':')[1].length - 2);
                let vaLK2 = keyV.replace('}', '').split(':')[0].slice(2, keyV.replace('}', '').split(':')[0].length).slice(0, keyV.replace('}', '').split(':')[0].length - 3);
                if (vaLK.match('"')) {
                    keyV = '{"' + vaLK2.split('\\"').join("").split('"').join('\\"') + '":"' + vaLK.split('\\"').join("").split('"').join('\\"') + '"';
                }
                Object.assign(_language, JSON.parse(keyV.replace('}', '') + '}'))

                return JSON.parse(keyV.replace('}', '') + '}');
            });
        }

        function lang_(_) {

            if (typeof _language[_.trim().split(' ').join('_').toLowerCase()] !== 'undefined') {
                // console.log(_);
                return Promise.resolve(_language[_.trim().split(' ').join('_').toLowerCase()])
            }

            return axios.get(path + "language/translate/" + language, {
                    params: {
                        name: _
                    }

                })
                .then(language => {
                    language = language.data;
                    return language
                }).catch(err => {
                    lang_(_);
                    console.error(err)
                })
        }

        function ScollNavDetector() {

            let didScroll,
                lastScrollTop = 0,
                delta = 5,
                nav = document.querySelector('nav'),
                navbarHeight = nav.offsetHeight;

            document.onscroll = () => {
                didScroll = true;
            };

            setInterval(() => {
                if (didScroll) {
                    hasScrolled();
                    didScroll = false;
                }
            }, 20);

            function hasScrolled() {
                let st = this.scrollY;

                // Make sure they scroll more than delta
                if (Math.abs(lastScrollTop - st) <= delta) {
                    return;
                }
                // If they scrolled down and are past the navbar, add class .nav-up.
                // This is necessary so you never see what is "behind" the navbar.

                if (((st + window.innerHeight)) === (window.innerHeight)) {
                    nav.classList.remove('fixed');
                    document.body.style.marginTop = 0 + 'px';
                    return
                }
                if (st > lastScrollTop /* && st > navbarHeight */ ) {
                    // Scroll Down
                    nav.classList.remove('fixed');
                    document.body.style.marginTop = 0 + 'px';

                } else {
                    // Scroll Up
                    if ((st + window.innerHeight) < document.body.offsetHeight) {
                        nav.classList.add('fixed');
                        document.body.style.marginTop = navbarHeight + 'px';

                    }

                }

                lastScrollTop = st;
            }
        }

        function initializeNavMenu() {
            if (typeof M !== "undefined") {
                const navMenu = document.querySelector('#menu-nav');
                if (navMenu)
                    M.Sidenav.init(navMenu);
            }
        }

        function initializeAOSAnimations() {
            if (typeof AOS !== "undefined")
                AOS.init();
        }

        function dateCountDown(elemnent, date) {
            if (elemnent) {
                // Set the date we're counting down to
                var countDownDate = new Date(date || "05-01-2022 15:37:25").getTime();

                // Update the count down every 1 second
                var x = setInterval(function() {

                    // Get today's date and time
                    var now = new Date().getTime();

                    // Find the distance between now and the count down date
                    var distance = countDownDate - now;

                    // Time calculations for days, hours, minutes and seconds
                    var days = Math.floor(distance / (1000 * 60 * 60 * 24));
                    var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                    var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                    var seconds = Math.floor((distance % (1000 * 60)) / 1000);


                    if (distance < 0) {
                        lang_("Expired").then(exp => {
                            // If the count down is finished, write some text
                            clearInterval(x);
                            elemnent.innerHTML = exp;

                        })
                    } else {
                        lang_("day").then(day => {
                            lang_("hr").then(hour => {
                                lang_("min").then(min => {
                                    lang_("sec").then(sec => {
                                        day = days > 1 ? day + 's' : day;
                                        hour = hours > 1 ? hour + 's' : hour;
                                        min = minutes > 1 ? min + 's' : min;
                                        sec = seconds > 1 ? sec + 's' : sec;
                                        // Display the result in the element with id="demo"
                                        elemnent.innerHTML = days + day + " " + hours + hour + " " +
                                            minutes + min + " " + seconds + sec + "";
                                    })
                                })
                            })
                        })
                    }

                }, 1000);
            }
        }

        function getCookie(name) {
            const value = `; ${document.cookie}`;
            const parts = value.split(`; ${name}=`);
            if (parts.length === 2) return parts.pop().split(';').shift();
            // return value.split(`; ${name}=`);
        }

        function getProductByID(products, ID) {
            let data = '';
            products.map(prod => {
                if (prod.productID === ID) {
                    return data = prod
                }
                return false
            })
            return data
        }

        function getPackegeByID(package, ID) {
            let data = '';
            package.map(pck => {
                if (pck.packageID === ID) {

                    return data = pck
                }
                return false
            })
            return data
        }
    </script>