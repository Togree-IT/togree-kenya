<%   

    if(typeof _language !== 'undefined'){
        _language = Object.keys(_language).map(key=>{
            let d = {};
            d[key] = _language[key]
        
            return JSON.stringify(d).split('\'').join("\\'");
        
        });
    }else{
        let _language = '';
    }

    // console.log(JSON.stringify(currency));
%>
    <script>
        let path = "<%= path %>",
            language = "<%= language %>",
            globalCurrency = JSON.parse('<%- typeof currency !=="undefined"? JSON.stringify(currency):"{\"name\":\"KSH\"}" %>') || 'KSH',
            s_language = '<%- typeof _language !=="undefined"?_language:""  %>',
            _language = {};
        window.products = {};


        if (s_language.length > 1) {
            s_language.split('},').map(keyV => {
                let vaLK = keyV.replace('}', '').split(':')[1].slice(1, keyV.replace('}', '').split(':')[1].length).slice(0, keyV.replace('}', '').split(':')[1].length - 2);
                let vaLK2 = keyV.replace('}', '').split(':')[0].slice(2, keyV.replace('}', '').split(':')[0].length).slice(0, keyV.replace('}', '').split(':')[0].length - 3);
                if (vaLK.match('"')) {
                    keyV = '{"' + vaLK2.split('\\"').join("").split('"').join('\\"') + '":"' + vaLK.split('\\"').join("").split('"').join('\\"') + '"';
                }
                Object.assign(_language, JSON.parse(keyV.replace('}', '') + '}'))

                return JSON.parse(keyV.replace('}', '') + '}');
            });
        }

        function lang_(_) {

            if (typeof _language[_.trim().split(' ').join('_').toLowerCase()] !== 'undefined') {
                // console.log(_);
                return Promise.resolve(_language[_.trim().split(' ').join('_').toLowerCase()])
            }

            return axios.get(path + "language/translate/" + language, {
                    params: {
                        name: _
                    }

                })
                .then(language => {
                    language = language.data;
                    return language
                }).catch(err => {
                    lang_(_);
                    console.error(err)
                })
        }

        function ScollNavDetector() {

            let didScroll,
                lastScrollTop = 0,
                delta = 5,
                nav = document.querySelector('nav'),
                navbarHeight = nav.offsetHeight;

            document.onscroll = () => {
                didScroll = true;
            };

            setInterval(() => {
                if (didScroll) {
                    hasScrolled();
                    didScroll = false;
                }
            }, 20);

            function hasScrolled() {
                let st = this.scrollY;

                // Make sure they scroll more than delta
                if (Math.abs(lastScrollTop - st) <= delta) {
                    return;
                }
                // If they scrolled down and are past the navbar, add class .nav-up.
                // This is necessary so you never see what is "behind" the navbar.

                if (((st + window.innerHeight)) === (window.innerHeight)) {
                    nav.classList.remove('fixed');
                    document.body.style.marginTop = 0 + 'px';
                    return
                }
                if (st > lastScrollTop /* && st > navbarHeight */ ) {
                    // Scroll Down
                    nav.classList.remove('fixed');
                    document.body.style.marginTop = 0 + 'px';

                } else {
                    // Scroll Up
                    if ((st + window.innerHeight) < document.body.offsetHeight) {
                        nav.classList.add('fixed');
                        document.body.style.marginTop = navbarHeight + 'px';

                    }

                }

                lastScrollTop = st;
            }
        }

        function initializeNavMenu() {
            if (typeof M !== "undefined") {
                const navMenu = document.querySelector('#menu-nav');
                if (navMenu)
                    M.Sidenav.init(navMenu);
            }
        }

        function initializeAOSAnimations() {
            if (typeof AOS !== "undefined")
                AOS.init();
        }

        function dateCountDown(elemnent, date) {
            if (elemnent) {
                // Set the date we're counting down to
                var countDownDate = new Date(date || "05-01-2022 15:37:25").getTime();

                // Update the count down every 1 second
                var x = setInterval(function() {

                    // Get today's date and time
                    var now = new Date().getTime();

                    // Find the distance between now and the count down date
                    var distance = countDownDate - now;

                    // Time calculations for days, hours, minutes and seconds
                    var days = Math.floor(distance / (1000 * 60 * 60 * 24));
                    var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                    var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                    var seconds = Math.floor((distance % (1000 * 60)) / 1000);


                    if (distance < 0) {
                        lang_("Expired").then(exp => {
                            // If the count down is finished, write some text
                            clearInterval(x);
                            elemnent.innerHTML = exp;

                        })
                    } else {
                        lang_("day").then(day => {
                            lang_("hr").then(hour => {
                                lang_("min").then(min => {
                                    lang_("sec").then(sec => {
                                        day = days > 1 ? day + 's' : day;
                                        hour = hours > 1 ? hour + 's' : hour;
                                        min = minutes > 1 ? min + 's' : min;
                                        sec = seconds > 1 ? sec + 's' : sec;
                                        // Display the result in the element with id="demo"
                                        elemnent.innerHTML = days + day + " " + hours + hour + " " +
                                            minutes + min + " " + seconds + sec + "";
                                    })
                                })
                            })
                        })
                    }

                }, 1000);
            }
        }

        function getCookie(name) {
            const value = `; ${document.cookie}`;
            const parts = value.split(`; ${name}=`);
            if (parts.length === 2) return parts.pop().split(';').shift();
            // return value.split(`; ${name}=`);
        }

        function getProductByID(products, ID) {
            let data = '';
            products.map(prod => {
                if (prod.productID === ID) {
                    return data = prod
                }
                return false
            })
            return data
        }

        function getPackegeByID(package, ID) {
            let data = '';
            package.map(pck => {
                if (pck.packageID === ID) {

                    return data = pck
                }
                return false
            })
            return data
        }

        function setCookie(cname, cvalue, exdays) {
            var d = new Date();
            d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
            // var expires = "expires=" + d.toUTCString();
            cvalue = JSON.stringify(cvalue) || cvalue;
            document.cookie = cname + "=" + cvalue + /* ";" + expires + */ ";path=/";
        }

        function setLangCookie(cname, cvalue, exdays) {
            var d = new Date();
            d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
            // var expires = "expires=" + d.toUTCString();
            // cvalue = JSON.stringify(cvalue) || cvalue;
            document.cookie = cname + "=" + cvalue + /* ";" + expires + */ ";path=/";
        }

        function bake_cookie(name, value) {
            var cookie = [name, '=', JSON.stringify(value), '; domain=.', window.location.host.toString(), '; path=/;'].join('');
            document.cookie = cookie;
        }

        function read_cookie(name) {
            var result = document.cookie.match(new RegExp(name + '=([^;]+)'));
            result && (result = JSON.parse(result[1]));
            return result;
        }

        function delete_cookie(name) {
            document.cookie = [name, '=; expires=Thu, 01-Jan-1970 00:00:01 GMT; path=/; domain=.', window.location.host.toString()].join('');
        }


        function getCookie(cname) {
            var name = cname + "=";
            var ca = document.cookie.split(';');
            for (var i = 0; i < ca.length; i++) {
                var c = ca[i];
                while (c.charAt(0) == ' ') {
                    c = c.substring(1);
                }
                if (c.indexOf(name) == 0) {
                    return c.substring(name.length, c.length);
                }
            }
            return "";
        }

        function addProductToCart(e, product_id) {
            let data = {};
            data[product_id] = {
                id: product_id,
                price: products[product_id].price,
                quantity: 1,
                productName: products[product_id].name
            };
            setCookie('cartItems', data);

            let cartActionsTemp = () => {
                return `<div class="art_cart_actions" id="art_qty_${product_id}">
    <button class="art_btn art_gree_btn filled waves-effect waves-light" onclick="decreaseProductToCart(event, '${product_id}')"><em class="material-icons">remove</em></button>
    <input type="number" min="1" class="art_qty_display" id="art_qty_display_${product_id}" contenteditable="true" value="1" onchange="updateProductToCart(event, '${product_id}')">
    <button class="art_btn art_gree_btn filled waves-effect waves-light" onclick="increaseProductToCart(event, '${product_id}')"><em class="material-icons">add</em></button>
</div>`;
            };

            let cartBtn = e.currentTarget;
            let productFooter = cartBtn.parentElement;
            if (productFooter) {
                cartBtn.style.display = 'none';
                productFooter.insertAdjacentHTML('AfterBegin', cartActionsTemp())
            }

            updateCartDOM(Object.keys(read_cookie('cartItems')).length)

        }

        function increaseProductToCart(e, product_id) {
            let cartItems = read_cookie('cartItems');
            if (cartItems[product_id]) {
                cartItems[product_id]['quantity'] = cartItems[product_id].quantity + 1;

                setCookie('cartItems', cartItems);
                let outDisplay, productFooter = e.currentTarget.parentElement.parentElement;
                if (productFooter) {

                    outDisplay = productFooter.querySelector('#art_qty_display_' + product_id);

                    if (outDisplay) {
                        outDisplay.value = cartItems[product_id]['quantity'];
                    }
                }

            }
            updateCartDOM(Object.keys(read_cookie('cartItems')).length)

        }

        function decreaseProductToCart(e, product_id) {
            let cartItems = read_cookie('cartItems');
            if (cartItems[product_id]) {
                if (cartItems[product_id]['quantity'] > 1) {
                    cartItems[product_id]['quantity'] = cartItems[product_id].quantity - 1;

                    setCookie('cartItems', cartItems);
                    let outDisplay, productFooter = e.currentTarget.parentElement.parentElement;
                    if (productFooter) {

                        outDisplay = productFooter.querySelector('#art_qty_display_' + product_id);

                        if (outDisplay) {
                            outDisplay.value = cartItems[product_id]['quantity'];
                        }
                    }
                } else {

                    let productFooter = e.currentTarget.parentElement;

                    if (productFooter) productFooter.remove();

                    let cartBtn = document.querySelector('#add_to_cat_' + product_id);
                    if (cartBtn) cartBtn.style = '';

                    delete cartItems[product_id];
                    setCookie('cartItems', cartItems);
                }
            }
            updateCartDOM(Object.keys(read_cookie('cartItems')).length)

        }

        function updateProductToCart(e, product_id) {
            let value = e.currentTarget;
            let cartItems = read_cookie('cartItems');
            if (cartItems[product_id]) {
                if ((+value.value) > 1) {
                    cartItems[product_id]['quantity'] = (+value.value);

                    setCookie('cartItems', cartItems);
                    let outDisplay, productFooter = e.currentTarget.parentElement.parentElement;
                    if (productFooter) {

                        outDisplay = productFooter.querySelector('#art_qty_display_' + product_id);

                        if (outDisplay) {
                            outDisplay.value = cartItems[product_id]['quantity'];
                        }
                    }
                } else {
                    value.value = 1;
                }
            }
            updateCartDOM(Object.keys(read_cookie('cartItems')).length)

        }

        function updateCartDOM(qty) {
            let cartDOM = document.querySelector('.art_shop_cart');

            if (cartDOM) {
                if (qty > 0) {
                    let art_cart_badge = cartDOM.querySelector('.art_cart_badge');
                    if (art_cart_badge) {
                        art_cart_badge.innerText = qty.toString();
                    } else {
                        let art_cart_badgeTemp = `<span class="art_cart_badge">${qty.toString()}</span>`;
                        cartDOM.insertAdjacentHTML('afterbegin', art_cart_badgeTemp);
                    }
                } else {
                    let art_cart_badge = cartDOM.querySelector('.art_cart_badge');
                    if (art_cart_badge) art_cart_badge.remove();
                    delete_cookie('cartItems');
                }
            }

        }

        function changeLanguage(lan, ref) {
            setLangCookie('language', lan);
            const lang = read_cookie('language');
            console.log(lang)
            console.log(lan)
        }
    </script>